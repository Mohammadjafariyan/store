//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming



export class ApiResponseOfListOfProductGroup implements IApiResponseOfListOfProductGroup {
    message?: string | undefined;
    data?: ProductGroup[] | undefined;
    status!: ApiResponseStatus;

    constructor(data?: IApiResponseOfListOfProductGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ProductGroup.fromJS(item));
            }
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): ApiResponseOfListOfProductGroup {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfListOfProductGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["status"] = this.status;
        return data;
    }
}

export interface IApiResponseOfListOfProductGroup {
    message?: string | undefined;
    data?: ProductGroup[] | undefined;
    status: ApiResponseStatus;
}

export class ProductGroup implements IProductGroup {
    id!: number;
    name!: string;
    status!: number;
    orderNumber!: number;
    parentId?: number | undefined;
    isChaild!: boolean;
    orderTypeId!: number;
    icone?: string | undefined;
    inverseParent!: ProductGroup[];
    orderType!: OrderType;
    parent?: ProductGroup | undefined;
    productGroupStyles!: ProductGroupStyle[];
    products!: Product[];
    statusNavigation!: Status;

    constructor(data?: IProductGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.inverseParent = [];
            this.orderType = new OrderType();
            this.productGroupStyles = [];
            this.products = [];
            this.statusNavigation = new Status();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.status = _data["status"];
            this.orderNumber = _data["orderNumber"];
            this.parentId = _data["parentId"];
            this.isChaild = _data["isChaild"];
            this.orderTypeId = _data["orderTypeId"];
            this.icone = _data["icone"];
            if (Array.isArray(_data["inverseParent"])) {
                this.inverseParent = [] as any;
                for (let item of _data["inverseParent"])
                    this.inverseParent!.push(ProductGroup.fromJS(item));
            }
            this.orderType = _data["orderType"] ? OrderType.fromJS(_data["orderType"]) : new OrderType();
            this.parent = _data["parent"] ? ProductGroup.fromJS(_data["parent"]) : <any>undefined;
            if (Array.isArray(_data["productGroupStyles"])) {
                this.productGroupStyles = [] as any;
                for (let item of _data["productGroupStyles"])
                    this.productGroupStyles!.push(ProductGroupStyle.fromJS(item));
            }
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(Product.fromJS(item));
            }
            this.statusNavigation = _data["statusNavigation"] ? Status.fromJS(_data["statusNavigation"]) : new Status();
        }
    }

    static fromJS(data: any): ProductGroup {
        data = typeof data === 'object' ? data : {};
        let result = new ProductGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["status"] = this.status;
        data["orderNumber"] = this.orderNumber;
        data["parentId"] = this.parentId;
        data["isChaild"] = this.isChaild;
        data["orderTypeId"] = this.orderTypeId;
        data["icone"] = this.icone;
        if (Array.isArray(this.inverseParent)) {
            data["inverseParent"] = [];
            for (let item of this.inverseParent)
                data["inverseParent"].push(item.toJSON());
        }
        data["orderType"] = this.orderType ? this.orderType.toJSON() : <any>undefined;
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        if (Array.isArray(this.productGroupStyles)) {
            data["productGroupStyles"] = [];
            for (let item of this.productGroupStyles)
                data["productGroupStyles"].push(item.toJSON());
        }
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        data["statusNavigation"] = this.statusNavigation ? this.statusNavigation.toJSON() : <any>undefined;
        return data;
    }
}

export interface IProductGroup {
    id: number;
    name: string;
    status: number;
    orderNumber: number;
    parentId?: number | undefined;
    isChaild: boolean;
    orderTypeId: number;
    icone?: string | undefined;
    inverseParent: ProductGroup[];
    orderType: OrderType;
    parent?: ProductGroup | undefined;
    productGroupStyles: ProductGroupStyle[];
    products: Product[];
    statusNavigation: Status;
}

export class OrderType implements IOrderType {
    id!: number;
    name!: string;
    productGroups!: ProductGroup[];
    products!: Product[];

    constructor(data?: IOrderType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.productGroups = [];
            this.products = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["productGroups"])) {
                this.productGroups = [] as any;
                for (let item of _data["productGroups"])
                    this.productGroups!.push(ProductGroup.fromJS(item));
            }
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrderType {
        data = typeof data === 'object' ? data : {};
        let result = new OrderType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.productGroups)) {
            data["productGroups"] = [];
            for (let item of this.productGroups)
                data["productGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data;
    }
}

export interface IOrderType {
    id: number;
    name: string;
    productGroups: ProductGroup[];
    products: Product[];
}

export class Product implements IProduct {
    name!: string;
    regDate!: Date;
    status!: number;
    orderTypeId!: number;
    brand!: number;
    material!: number;
    description?: string | undefined;
    summery?: string | undefined;
    dynamicProperty?: string | undefined;
    productCode?: string | undefined;
    regUserId?: number | undefined;
    basePrice!: number;
    price!: number;
    productGroupId!: number;
    productType!: number;
    brandNavigation!: Brand;
    materialNavigation!: Material;
    orderType!: OrderType;
    producImages!: ProducImage[];
    productGroup!: ProductGroup;
    productRepositories!: ProductRepository[];
    productTags!: ProductTag[];
    productVisit?: ProductVisit | undefined;
    statusNavigation!: Status;

    constructor(data?: IProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.brandNavigation = new Brand();
            this.materialNavigation = new Material();
            this.orderType = new OrderType();
            this.producImages = [];
            this.productGroup = new ProductGroup();
            this.productRepositories = [];
            this.productTags = [];
            this.statusNavigation = new Status();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.regDate = _data["regDate"] ? new Date(_data["regDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.orderTypeId = _data["orderTypeId"];
            this.brand = _data["brand"];
            this.material = _data["material"];
            this.description = _data["description"];
            this.summery = _data["summery"];
            this.dynamicProperty = _data["dynamicProperty"];
            this.productCode = _data["productCode"];
            this.regUserId = _data["regUserId"];
            this.basePrice = _data["basePrice"];
            this.price = _data["price"];
            this.productGroupId = _data["productGroupId"];
            this.productType = _data["productType"];
            this.brandNavigation = _data["brandNavigation"] ? Brand.fromJS(_data["brandNavigation"]) : new Brand();
            this.materialNavigation = _data["materialNavigation"] ? Material.fromJS(_data["materialNavigation"]) : new Material();
            this.orderType = _data["orderType"] ? OrderType.fromJS(_data["orderType"]) : new OrderType();
            if (Array.isArray(_data["producImages"])) {
                this.producImages = [] as any;
                for (let item of _data["producImages"])
                    this.producImages!.push(ProducImage.fromJS(item));
            }
            this.productGroup = _data["productGroup"] ? ProductGroup.fromJS(_data["productGroup"]) : new ProductGroup();
            if (Array.isArray(_data["productRepositories"])) {
                this.productRepositories = [] as any;
                for (let item of _data["productRepositories"])
                    this.productRepositories!.push(ProductRepository.fromJS(item));
            }
            if (Array.isArray(_data["productTags"])) {
                this.productTags = [] as any;
                for (let item of _data["productTags"])
                    this.productTags!.push(ProductTag.fromJS(item));
            }
            this.productVisit = _data["productVisit"] ? ProductVisit.fromJS(_data["productVisit"]) : <any>undefined;
            this.statusNavigation = _data["statusNavigation"] ? Status.fromJS(_data["statusNavigation"]) : new Status();
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["regDate"] = this.regDate ? this.regDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["orderTypeId"] = this.orderTypeId;
        data["brand"] = this.brand;
        data["material"] = this.material;
        data["description"] = this.description;
        data["summery"] = this.summery;
        data["dynamicProperty"] = this.dynamicProperty;
        data["productCode"] = this.productCode;
        data["regUserId"] = this.regUserId;
        data["basePrice"] = this.basePrice;
        data["price"] = this.price;
        data["productGroupId"] = this.productGroupId;
        data["productType"] = this.productType;
        data["brandNavigation"] = this.brandNavigation ? this.brandNavigation.toJSON() : <any>undefined;
        data["materialNavigation"] = this.materialNavigation ? this.materialNavigation.toJSON() : <any>undefined;
        data["orderType"] = this.orderType ? this.orderType.toJSON() : <any>undefined;
        if (Array.isArray(this.producImages)) {
            data["producImages"] = [];
            for (let item of this.producImages)
                data["producImages"].push(item.toJSON());
        }
        data["productGroup"] = this.productGroup ? this.productGroup.toJSON() : <any>undefined;
        if (Array.isArray(this.productRepositories)) {
            data["productRepositories"] = [];
            for (let item of this.productRepositories)
                data["productRepositories"].push(item.toJSON());
        }
        if (Array.isArray(this.productTags)) {
            data["productTags"] = [];
            for (let item of this.productTags)
                data["productTags"].push(item.toJSON());
        }
        data["productVisit"] = this.productVisit ? this.productVisit.toJSON() : <any>undefined;
        data["statusNavigation"] = this.statusNavigation ? this.statusNavigation.toJSON() : <any>undefined;
        return data;
    }
}

export interface IProduct {
    name: string;
    regDate: Date;
    status: number;
    orderTypeId: number;
    brand: number;
    material: number;
    description?: string | undefined;
    summery?: string | undefined;
    dynamicProperty?: string | undefined;
    productCode?: string | undefined;
    regUserId?: number | undefined;
    basePrice: number;
    price: number;
    productGroupId: number;
    productType: number;
    brandNavigation: Brand;
    materialNavigation: Material;
    orderType: OrderType;
    producImages: ProducImage[];
    productGroup: ProductGroup;
    productRepositories: ProductRepository[];
    productTags: ProductTag[];
    productVisit?: ProductVisit | undefined;
    statusNavigation: Status;
}

export class Brand implements IBrand {
    id!: number;
    name?: string | undefined;
    products!: Product[];

    constructor(data?: IBrand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.products = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Brand {
        data = typeof data === 'object' ? data : {};
        let result = new Brand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBrand {
    id: number;
    name?: string | undefined;
    products: Product[];
}

export class Material implements IMaterial {
    id!: number;
    name!: string;
    colorCode!: string;
    icon!: string;
    unit!: number;
    lastPrice!: number;
    description?: string | undefined;
    majorOrderConfs!: MajorOrderConf[];
    orderProducts!: OrderProduct[];
    products!: Product[];

    constructor(data?: IMaterial) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.majorOrderConfs = [];
            this.orderProducts = [];
            this.products = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.colorCode = _data["colorCode"];
            this.icon = _data["icon"];
            this.unit = _data["unit"];
            this.lastPrice = _data["lastPrice"];
            this.description = _data["description"];
            if (Array.isArray(_data["majorOrderConfs"])) {
                this.majorOrderConfs = [] as any;
                for (let item of _data["majorOrderConfs"])
                    this.majorOrderConfs!.push(MajorOrderConf.fromJS(item));
            }
            if (Array.isArray(_data["orderProducts"])) {
                this.orderProducts = [] as any;
                for (let item of _data["orderProducts"])
                    this.orderProducts!.push(OrderProduct.fromJS(item));
            }
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Material {
        data = typeof data === 'object' ? data : {};
        let result = new Material();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["colorCode"] = this.colorCode;
        data["icon"] = this.icon;
        data["unit"] = this.unit;
        data["lastPrice"] = this.lastPrice;
        data["description"] = this.description;
        if (Array.isArray(this.majorOrderConfs)) {
            data["majorOrderConfs"] = [];
            for (let item of this.majorOrderConfs)
                data["majorOrderConfs"].push(item.toJSON());
        }
        if (Array.isArray(this.orderProducts)) {
            data["orderProducts"] = [];
            for (let item of this.orderProducts)
                data["orderProducts"].push(item.toJSON());
        }
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMaterial {
    id: number;
    name: string;
    colorCode: string;
    icon: string;
    unit: number;
    lastPrice: number;
    description?: string | undefined;
    majorOrderConfs: MajorOrderConf[];
    orderProducts: OrderProduct[];
    products: Product[];
}

export class MajorOrderConf implements IMajorOrderConf {
    id!: number;
    materialId?: number | undefined;
    productGroupId?: number | undefined;
    productTypeId?: number | undefined;
    discount!: number;
    orderCount?: number | undefined;
    productId?: number | undefined;
    material?: Material | undefined;

    constructor(data?: IMajorOrderConf) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.materialId = _data["materialId"];
            this.productGroupId = _data["productGroupId"];
            this.productTypeId = _data["productTypeId"];
            this.discount = _data["discount"];
            this.orderCount = _data["orderCount"];
            this.productId = _data["productId"];
            this.material = _data["material"] ? Material.fromJS(_data["material"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MajorOrderConf {
        data = typeof data === 'object' ? data : {};
        let result = new MajorOrderConf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["materialId"] = this.materialId;
        data["productGroupId"] = this.productGroupId;
        data["productTypeId"] = this.productTypeId;
        data["discount"] = this.discount;
        data["orderCount"] = this.orderCount;
        data["productId"] = this.productId;
        data["material"] = this.material ? this.material.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMajorOrderConf {
    id: number;
    materialId?: number | undefined;
    productGroupId?: number | undefined;
    productTypeId?: number | undefined;
    discount: number;
    orderCount?: number | undefined;
    productId?: number | undefined;
    material?: Material | undefined;
}

export class OrderProduct implements IOrderProduct {
    id!: number;
    productId?: number | undefined;
    materialId?: number | undefined;
    weight?: number | undefined;
    size?: string | undefined;
    orderUserId?: number | undefined;
    orderDate?: Date | undefined;
    status?: number | undefined;
    orderInfo?: string | undefined;
    orderCount!: number;
    majorOrderConfId?: number | undefined;
    material?: Material | undefined;
    orderProductAtachments!: OrderProductAtachment[];
    statusNavigation?: Status | undefined;

    constructor(data?: IOrderProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.orderProductAtachments = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.productId = _data["productId"];
            this.materialId = _data["materialId"];
            this.weight = _data["weight"];
            this.size = _data["size"];
            this.orderUserId = _data["orderUserId"];
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.orderInfo = _data["orderInfo"];
            this.orderCount = _data["orderCount"];
            this.majorOrderConfId = _data["majorOrderConfId"];
            this.material = _data["material"] ? Material.fromJS(_data["material"]) : <any>undefined;
            if (Array.isArray(_data["orderProductAtachments"])) {
                this.orderProductAtachments = [] as any;
                for (let item of _data["orderProductAtachments"])
                    this.orderProductAtachments!.push(OrderProductAtachment.fromJS(item));
            }
            this.statusNavigation = _data["statusNavigation"] ? Status.fromJS(_data["statusNavigation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OrderProduct {
        data = typeof data === 'object' ? data : {};
        let result = new OrderProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productId"] = this.productId;
        data["materialId"] = this.materialId;
        data["weight"] = this.weight;
        data["size"] = this.size;
        data["orderUserId"] = this.orderUserId;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["orderInfo"] = this.orderInfo;
        data["orderCount"] = this.orderCount;
        data["majorOrderConfId"] = this.majorOrderConfId;
        data["material"] = this.material ? this.material.toJSON() : <any>undefined;
        if (Array.isArray(this.orderProductAtachments)) {
            data["orderProductAtachments"] = [];
            for (let item of this.orderProductAtachments)
                data["orderProductAtachments"].push(item.toJSON());
        }
        data["statusNavigation"] = this.statusNavigation ? this.statusNavigation.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOrderProduct {
    id: number;
    productId?: number | undefined;
    materialId?: number | undefined;
    weight?: number | undefined;
    size?: string | undefined;
    orderUserId?: number | undefined;
    orderDate?: Date | undefined;
    status?: number | undefined;
    orderInfo?: string | undefined;
    orderCount: number;
    majorOrderConfId?: number | undefined;
    material?: Material | undefined;
    orderProductAtachments: OrderProductAtachment[];
    statusNavigation?: Status | undefined;
}

export class OrderProductAtachment implements IOrderProductAtachment {
    id!: number;
    orderProductId!: number;
    path!: string;
    type!: number;
    status!: number;
    orderProduct!: OrderProduct;

    constructor(data?: IOrderProductAtachment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.orderProduct = new OrderProduct();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderProductId = _data["orderProductId"];
            this.path = _data["path"];
            this.type = _data["type"];
            this.status = _data["status"];
            this.orderProduct = _data["orderProduct"] ? OrderProduct.fromJS(_data["orderProduct"]) : new OrderProduct();
        }
    }

    static fromJS(data: any): OrderProductAtachment {
        data = typeof data === 'object' ? data : {};
        let result = new OrderProductAtachment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderProductId"] = this.orderProductId;
        data["path"] = this.path;
        data["type"] = this.type;
        data["status"] = this.status;
        data["orderProduct"] = this.orderProduct ? this.orderProduct.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOrderProductAtachment {
    id: number;
    orderProductId: number;
    path: string;
    type: number;
    status: number;
    orderProduct: OrderProduct;
}

export class Status implements IStatus {
    id!: number;
    name!: string;
    caption?: string | undefined;
    description?: string | undefined;
    orderProducts!: OrderProduct[];
    productGroups!: ProductGroup[];
    productRepositories!: ProductRepository[];
    products!: Product[];

    constructor(data?: IStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.orderProducts = [];
            this.productGroups = [];
            this.productRepositories = [];
            this.products = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.caption = _data["caption"];
            this.description = _data["description"];
            if (Array.isArray(_data["orderProducts"])) {
                this.orderProducts = [] as any;
                for (let item of _data["orderProducts"])
                    this.orderProducts!.push(OrderProduct.fromJS(item));
            }
            if (Array.isArray(_data["productGroups"])) {
                this.productGroups = [] as any;
                for (let item of _data["productGroups"])
                    this.productGroups!.push(ProductGroup.fromJS(item));
            }
            if (Array.isArray(_data["productRepositories"])) {
                this.productRepositories = [] as any;
                for (let item of _data["productRepositories"])
                    this.productRepositories!.push(ProductRepository.fromJS(item));
            }
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Status {
        data = typeof data === 'object' ? data : {};
        let result = new Status();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["caption"] = this.caption;
        data["description"] = this.description;
        if (Array.isArray(this.orderProducts)) {
            data["orderProducts"] = [];
            for (let item of this.orderProducts)
                data["orderProducts"].push(item.toJSON());
        }
        if (Array.isArray(this.productGroups)) {
            data["productGroups"] = [];
            for (let item of this.productGroups)
                data["productGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.productRepositories)) {
            data["productRepositories"] = [];
            for (let item of this.productRepositories)
                data["productRepositories"].push(item.toJSON());
        }
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data;
    }
}

export interface IStatus {
    id: number;
    name: string;
    caption?: string | undefined;
    description?: string | undefined;
    orderProducts: OrderProduct[];
    productGroups: ProductGroup[];
    productRepositories: ProductRepository[];
    products: Product[];
}

export class ProductRepository implements IProductRepository {
    id!: number;
    productId!: string;
    uqtCode?: string | undefined;
    weight!: number;
    carat!: number;
    status!: number;
    regUserId!: number;
    regDate!: Date;
    color?: string | undefined;
    product!: Product;
    statusNavigation!: Status;

    constructor(data?: IProductRepository) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.product = new Product();
            this.statusNavigation = new Status();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.productId = _data["productId"];
            this.uqtCode = _data["uqtCode"];
            this.weight = _data["weight"];
            this.carat = _data["carat"];
            this.status = _data["status"];
            this.regUserId = _data["regUserId"];
            this.regDate = _data["regDate"] ? new Date(_data["regDate"].toString()) : <any>undefined;
            this.color = _data["color"];
            this.product = _data["product"] ? Product.fromJS(_data["product"]) : new Product();
            this.statusNavigation = _data["statusNavigation"] ? Status.fromJS(_data["statusNavigation"]) : new Status();
        }
    }

    static fromJS(data: any): ProductRepository {
        data = typeof data === 'object' ? data : {};
        let result = new ProductRepository();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productId"] = this.productId;
        data["uqtCode"] = this.uqtCode;
        data["weight"] = this.weight;
        data["carat"] = this.carat;
        data["status"] = this.status;
        data["regUserId"] = this.regUserId;
        data["regDate"] = this.regDate ? this.regDate.toISOString() : <any>undefined;
        data["color"] = this.color;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        data["statusNavigation"] = this.statusNavigation ? this.statusNavigation.toJSON() : <any>undefined;
        return data;
    }
}

export interface IProductRepository {
    id: number;
    productId: string;
    uqtCode?: string | undefined;
    weight: number;
    carat: number;
    status: number;
    regUserId: number;
    regDate: Date;
    color?: string | undefined;
    product: Product;
    statusNavigation: Status;
}

export class ProducImage implements IProducImage {
    product!: string;
    productRepositoryId?: number | undefined;
    path!: string;
    status!: number;
    orderNum!: number;
    type!: number;
    productNavigation!: Product;

    constructor(data?: IProducImage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.productNavigation = new Product();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.product = _data["product"];
            this.productRepositoryId = _data["productRepositoryId"];
            this.path = _data["path"];
            this.status = _data["status"];
            this.orderNum = _data["orderNum"];
            this.type = _data["type"];
            this.productNavigation = _data["productNavigation"] ? Product.fromJS(_data["productNavigation"]) : new Product();
        }
    }

    static fromJS(data: any): ProducImage {
        data = typeof data === 'object' ? data : {};
        let result = new ProducImage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["product"] = this.product;
        data["productRepositoryId"] = this.productRepositoryId;
        data["path"] = this.path;
        data["status"] = this.status;
        data["orderNum"] = this.orderNum;
        data["type"] = this.type;
        data["productNavigation"] = this.productNavigation ? this.productNavigation.toJSON() : <any>undefined;
        return data;
    }
}

export interface IProducImage {
    product: string;
    productRepositoryId?: number | undefined;
    path: string;
    status: number;
    orderNum: number;
    type: number;
    productNavigation: Product;
}

export class ProductTag implements IProductTag {
    id!: number;
    productId!: string;
    tagId!: number;
    product!: Product;
    tag!: Tag;

    constructor(data?: IProductTag) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.product = new Product();
            this.tag = new Tag();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.productId = _data["productId"];
            this.tagId = _data["tagId"];
            this.product = _data["product"] ? Product.fromJS(_data["product"]) : new Product();
            this.tag = _data["tag"] ? Tag.fromJS(_data["tag"]) : new Tag();
        }
    }

    static fromJS(data: any): ProductTag {
        data = typeof data === 'object' ? data : {};
        let result = new ProductTag();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productId"] = this.productId;
        data["tagId"] = this.tagId;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        data["tag"] = this.tag ? this.tag.toJSON() : <any>undefined;
        return data;
    }
}

export interface IProductTag {
    id: number;
    productId: string;
    tagId: number;
    product: Product;
    tag: Tag;
}

export class Tag implements ITag {
    id!: number;
    name!: string;
    productTags!: ProductTag[];

    constructor(data?: ITag) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.productTags = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["productTags"])) {
                this.productTags = [] as any;
                for (let item of _data["productTags"])
                    this.productTags!.push(ProductTag.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Tag {
        data = typeof data === 'object' ? data : {};
        let result = new Tag();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.productTags)) {
            data["productTags"] = [];
            for (let item of this.productTags)
                data["productTags"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITag {
    id: number;
    name: string;
    productTags: ProductTag[];
}

export class ProductVisit implements IProductVisit {
    productId!: string;
    numberOfVisits!: number;
    numberOfSells!: number;
    product!: Product;

    constructor(data?: IProductVisit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.product = new Product();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"];
            this.numberOfVisits = _data["numberOfVisits"];
            this.numberOfSells = _data["numberOfSells"];
            this.product = _data["product"] ? Product.fromJS(_data["product"]) : new Product();
        }
    }

    static fromJS(data: any): ProductVisit {
        data = typeof data === 'object' ? data : {};
        let result = new ProductVisit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["numberOfVisits"] = this.numberOfVisits;
        data["numberOfSells"] = this.numberOfSells;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        return data;
    }
}

export interface IProductVisit {
    productId: string;
    numberOfVisits: number;
    numberOfSells: number;
    product: Product;
}

export class ProductGroupStyle implements IProductGroupStyle {
    id!: number;
    productGroupId!: number;
    productStyleId!: number;
    productGroup!: ProductGroup;
    productStyle!: ProductStyle;

    constructor(data?: IProductGroupStyle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.productGroup = new ProductGroup();
            this.productStyle = new ProductStyle();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.productGroupId = _data["productGroupId"];
            this.productStyleId = _data["productStyleId"];
            this.productGroup = _data["productGroup"] ? ProductGroup.fromJS(_data["productGroup"]) : new ProductGroup();
            this.productStyle = _data["productStyle"] ? ProductStyle.fromJS(_data["productStyle"]) : new ProductStyle();
        }
    }

    static fromJS(data: any): ProductGroupStyle {
        data = typeof data === 'object' ? data : {};
        let result = new ProductGroupStyle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productGroupId"] = this.productGroupId;
        data["productStyleId"] = this.productStyleId;
        data["productGroup"] = this.productGroup ? this.productGroup.toJSON() : <any>undefined;
        data["productStyle"] = this.productStyle ? this.productStyle.toJSON() : <any>undefined;
        return data;
    }
}

export interface IProductGroupStyle {
    id: number;
    productGroupId: number;
    productStyleId: number;
    productGroup: ProductGroup;
    productStyle: ProductStyle;
}

export class ProductStyle implements IProductStyle {
    id!: number;
    name!: string;
    productGroupStyles!: ProductGroupStyle[];

    constructor(data?: IProductStyle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.productGroupStyles = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["productGroupStyles"])) {
                this.productGroupStyles = [] as any;
                for (let item of _data["productGroupStyles"])
                    this.productGroupStyles!.push(ProductGroupStyle.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductStyle {
        data = typeof data === 'object' ? data : {};
        let result = new ProductStyle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.productGroupStyles)) {
            data["productGroupStyles"] = [];
            for (let item of this.productGroupStyles)
                data["productGroupStyles"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProductStyle {
    id: number;
    name: string;
    productGroupStyles: ProductGroupStyle[];
}

export enum ApiResponseStatus {
    Success = 0,
    Fail = 1,
}

export class ApiResponseOfListOfProduct implements IApiResponseOfListOfProduct {
    message?: string | undefined;
    data?: Product[] | undefined;
    status!: ApiResponseStatus;

    constructor(data?: IApiResponseOfListOfProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Product.fromJS(item));
            }
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): ApiResponseOfListOfProduct {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfListOfProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["status"] = this.status;
        return data;
    }
}

export interface IApiResponseOfListOfProduct {
    message?: string | undefined;
    data?: Product[] | undefined;
    status: ApiResponseStatus;
}

export class ApiResponseOfSearchResponseType implements IApiResponseOfSearchResponseType {
    message?: string | undefined;
    data?: SearchResponseType | undefined;
    status!: ApiResponseStatus;

    constructor(data?: IApiResponseOfSearchResponseType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.data = _data["data"] ? SearchResponseType.fromJS(_data["data"]) : <any>undefined;
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): ApiResponseOfSearchResponseType {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfSearchResponseType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["status"] = this.status;
        return data;
    }
}

export interface IApiResponseOfSearchResponseType {
    message?: string | undefined;
    data?: SearchResponseType | undefined;
    status: ApiResponseStatus;
}

export class SearchResponseType implements ISearchResponseType {
    list!: Product[];
    total!: number;

    constructor(data?: ISearchResponseType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.list = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["list"])) {
                this.list = [] as any;
                for (let item of _data["list"])
                    this.list!.push(Product.fromJS(item));
            }
            this.total = _data["total"];
        }
    }

    static fromJS(data: any): SearchResponseType {
        data = typeof data === 'object' ? data : {};
        let result = new SearchResponseType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.list)) {
            data["list"] = [];
            for (let item of this.list)
                data["list"].push(item.toJSON());
        }
        data["total"] = this.total;
        return data;
    }
}

export interface ISearchResponseType {
    list: Product[];
    total: number;
}

export class ApiResponseOfListOfMaterial implements IApiResponseOfListOfMaterial {
    message?: string | undefined;
    data?: Material[] | undefined;
    status!: ApiResponseStatus;

    constructor(data?: IApiResponseOfListOfMaterial) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Material.fromJS(item));
            }
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): ApiResponseOfListOfMaterial {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfListOfMaterial();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["status"] = this.status;
        return data;
    }
}

export interface IApiResponseOfListOfMaterial {
    message?: string | undefined;
    data?: Material[] | undefined;
    status: ApiResponseStatus;
}

export class WeatherForecast implements IWeatherForecast {
    date!: Date;
    temperatureC!: number;
    temperatureF!: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date: Date;
    temperatureC: number;
    temperatureF: number;
    summary?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}